version: '3.8'

services:
  db:
    image: postgres:latest
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  db_init:
    build:
      context: ./bd_init
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [
        "CMD-SHELL",
        "psql -U postgres -h db -d crypto -tAc \"SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'prices');\" | grep -q 't'"
      ]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    command: >
      sh -c "
            until PGPASSWORD=password psql -h db -U postgres -d crypto -c 'SELECT 1 FROM prices LIMIT 1;';
            do
              echo 'Waiting for prices table...';
              sleep 5;
            done;
            exec python main.py
          "

  deribit_client:
    build:
      context: ./deribit_client
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "
            until PGPASSWORD=password psql -h db -U postgres -d crypto -c 'SELECT 1 FROM prices LIMIT 1;';
            do
              echo 'Waiting for prices table...';
              sleep 5;
            done;
            exec python main.py
          "

volumes:
  postgres_data:
